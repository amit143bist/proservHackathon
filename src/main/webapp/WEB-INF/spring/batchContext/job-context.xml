<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config />
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<bean id="dataSkipListener"
		class="com.docusign.envelope.batch.handler.DataRecordSkipHandler">
		<!-- <property name="csvFileFailItemWriter" ref="csvFileFailItemWriter" 
			/> -->
	</bean>

	<bean id="notificationPartitioner"
		class="com.docusign.envelope.file.partition.MultiFileResourcePartitioner"
		scope="step">
		<!-- <property name="inboundDir" value="#{jobParameters['inputDirectoryPath']}" /> -->
	</bean>

	<bean id="notificationLoadTaskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" scope="step">
		<property name="corePoolSize" value="5" />
		<property name="maxPoolSize" value="20" />
		<property name="queueCapacity" value="20" />
		<property name="allowCoreThreadTimeOut" value="true" />
	</bean>

	<!-- Batch job -->
	<batch:job id="notificationProcessingJob">
		<batch:step id="partitionedInventoryLoadStep">
			<batch:partition step="step1" partitioner="notificationPartitioner">
				<batch:handler grid-size="100" task-executor="notificationLoadTaskExecutor" />
			</batch:partition>
		</batch:step>
	</batch:job>

	<batch:step id="step1">
		<batch:tasklet>
			<batch:chunk reader="csvFileItemReader" processor="dataProcessor"
				writer="csvFileItemWriter" commit-interval="2" skip-limit="20">
				<batch:streams>
					<batch:stream ref="csvFileFailItemWriter" />
				</batch:streams>
				<batch:skippable-exception-classes>
					<batch:include class="java.lang.Exception" />
				</batch:skippable-exception-classes>
			</batch:chunk>
		</batch:tasklet>
		<!-- <batch:listeners>
			<batch:listener ref="dataSkipListener" />
		</batch:listeners> -->
	</batch:step>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate" />

	<bean id="dataProcessor"
		class="com.docusign.envelope.file.processor.DSNotificationProcessor"
		scope="step">
		
		<property name = "dsAuthHeader" value="#{jobParameters['dsAuthHeader']}"/>
		<property name = "accountId" value="#{jobParameters['accountId']}"/>
		<property name = "jobId" value="#{jobParameters['jobId']}"/>
		
	</bean>

	<bean id="csvFileItemReader" class="com.docusign.envelope.file.reader.StreamFileReader"
		scope="step">
		<property name="name" value="csvStreamFileReader"/>
		<property name="resourceFile" value="#{stepExecutionContext['fileResource']}" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names"
							value="envelopeId,reminderEnabled,reminderDelay,reminderFrequency,expireEnabled,expireAfter,expireWarn" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.docusign.envelope.file.mapper.EnvelopeSetMapper">
						<property name="reminderEnabled" value="#{jobParameters['reminderEnabled']}"/>
						<property name="expirationEnabled" value="#{jobParameters['expirationEnabled']}"/>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="csvFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter"
		scope="step">
		<!-- write to this csv file -->
		<property name="resource" value="file:#{jobParameters['outputDataFile']}/report.processed_success.csv" />
		<property name="shouldDeleteIfExists" value="true" />
		<property name="shouldDeleteIfEmpty" value="true" />

		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.PassThroughFieldExtractor">
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="csvFileFailItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter"
		scope="step">
		<!-- write to this csv file -->
		
		<property name="resource" value="file:#{jobParameters['outputDataFile']}/report.processed_failed.csv" />
		<property name="shouldDeleteIfExists" value="true" />
		<property name="shouldDeleteIfEmpty" value="true" />

		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.PassThroughFieldExtractor">
					</bean>
				</property>
			</bean>
		</property>
	</bean>

</beans>